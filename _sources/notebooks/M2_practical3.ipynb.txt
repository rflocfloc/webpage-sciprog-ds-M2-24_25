{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 2, Practical 3\n",
    "\n",
    "In this practical we will start working with algorithm complexity through practical examples.\n",
    "\n",
    "## Complexity \n",
    "\n",
    "The *complexity* of an algorithm can be defined as a function mapping the size of the input to the time required to get the result. This is also called the *cost function*.\n",
    "\n",
    "There exist several asymptotic (time-measuring) notations. Informally they are:\n",
    "\n",
    "- Big Omega (best case)\n",
    "- Big Theta (average case)\n",
    "- Big O (worst case)\n",
    "\n",
    "The upper-bound complexity *O* (the *big-Oh*) is generally the most interesting to analyze. In this practical we will work with this notation considering several Python code samples.\n",
    "\n",
    "Big O is a formal notation that describes the behaviour of a function when the argument tends towards the maximum input. Big O takes the upper bound, that is, it considers the worst-case results, the worst execution of the algorithm. \n",
    "\n",
    "Instead of saying the input is 10 billion, or infinite, we say the input is ```n``` size. The exact size of the input doesnâ€™t matter, we only care of how our algorithm performs with the worst input. This approach allows to still work with Big O even if we do not know the exact size of the input during the code execution.\n",
    "\n",
    "Big O is easy to read once we learn the different order of growth:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import math\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "inputList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n",
    "\n",
    "linear  = [n for n in inputList]\n",
    "logn  = [math.log(n) for n in inputList]\n",
    "quadratic  = [n*n for n in inputList]\n",
    "cubic = [n*n*n for n in inputList]\n",
    "exponential = [2**n for n in inputList]\n",
    "\n",
    "functDict = {'linear': linear, \"logn\": logn, \"quadratic\": quadratic, \"cubic\": cubic, \"exp\": exponential}\n",
    "functDf = pd.DataFrame(functDict) \n",
    "functDf.plot()\n",
    "plt.show()\n",
    "plt.close()\n",
    "\n",
    "\n",
    "functDf[[\"linear\", \"logn\", \"quadratic\"]].plot()\n",
    "plt.title(\"zoomed in\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "##### Python built-in data structures and relative methods have different time complexity. A comprehensive list is available at this  [link](https://wiki.python.org/moin/TimeComplexity)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example 1**\n",
    "\n",
    "Determine the complexity of these two functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "5\n",
      "6\n",
      "8\n",
      "---------------------\n",
      "Forward:\n",
      "4\n",
      "5\n",
      "6\n",
      "8\n",
      "Reverse:\n",
      "8\n",
      "6\n",
      "5\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "def printList(inputList):\n",
    "    for item in inputList:\n",
    "        print(item)\n",
    "\n",
    "printList([4, 5, 6, 8])\n",
    "\n",
    "print(\"---------------------\")\n",
    "\n",
    "def printListBothDirections(inputList):\n",
    "    print(\"Forward:\")\n",
    "    for item in inputList:\n",
    "        print(item)\n",
    "    print(\"Reverse:\")\n",
    "    for item in inputList[::-1]:\n",
    "        print(item)\n",
    "\n",
    "printListBothDirections([4, 5, 6, 8])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity</summary>\n",
    "\n",
    "Both ```printList``` and ```printListBothDirections``` are ```O(n)```, so their complexity is linear with respect to the processed list lenght.  \n",
    "To be precise, ```printListBothDirections``` is ```O(n+n) = O(2n)```, but since we're looking \n",
    "towards infinite-size inputs, the double of infinite is still infinite.\n",
    "\n",
    "</details>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example 2**\n",
    "\n",
    "Determine the complexity of a function that computes the highest value for each pair of values from two input lists ```l1``` and ```l2```."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value 4 in l1 greater than value 1 in l2\n",
      "Value 5 in l1 greater than value 1 in l2\n",
      "Value 6 in l1 greater than value 1 in l2\n",
      "Value 8 in l1 greater than value 1 in l2\n"
     ]
    }
   ],
   "source": [
    "def computeHighest(l1, l2):\n",
    "    for i1 in l1:\n",
    "        for i2 in l2:\n",
    "            if i1 > i2:\n",
    "                print(\"Value {} in l1 greater than value {} in l2\".format(i1, i2))     \n",
    "\n",
    "computeHighest([4, 5, 6, 8], [12,1,42,11])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity </summary>\n",
    "\n",
    "The function is quadratic, ```O(n^2)```, as we do n iterations (one per each element in l1) times n iterations (one per each element in l2).\n",
    "\n",
    "</details>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example 3**\n",
    "\n",
    "Determine the complexity of the following functions, performing multiple tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 seconds left\n",
      "3 seconds left\n",
      "2 seconds left\n",
      "1 seconds left\n",
      "boom!\n",
      "--------------\n",
      "4>5>6>8>12>14\n",
      "--------------\n",
      "I'm in the diagonal 4 4\n",
      "I'm in the diagonal 5 5\n",
      "I'm in the diagonal 6 6\n",
      "I'm in the diagonal 8 8\n",
      "I'm in the diagonal 12 12\n",
      "I'm in the diagonal 14 14\n"
     ]
    }
   ],
   "source": [
    "def myFunction(items):\n",
    "\n",
    "    for i in reversed(range(1, 5)):\n",
    "        print (\"{} seconds left\".format(i))\n",
    "    print(\"boom!\\n--------------\")\n",
    "\n",
    "    itemsString = \"\"\n",
    "    for item in items:\n",
    "        itemsString += \">{}\".format(item)\n",
    "    print(itemsString[1:])\n",
    "\n",
    "    print(\"--------------\")\n",
    "\n",
    "    pairwiseProducts = []\n",
    "    for item1 in items:\n",
    "        for item2 in items:\n",
    "            if (item1 == item2):\n",
    "                print(\"I'm in the diagonal {} {}\".format(item1, item2))\n",
    "            pairwiseProducts.append(item1*item2)\n",
    "\n",
    "myFunction([4, 5, 6, 8, 12, 14])    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary> Show/Hide Complexity </summary>\n",
    "\n",
    "The complexity of this function can be determined by breaking it down in its different parts:\n",
    "\n",
    "- the first loop does 4 iterations, regardless of the input. It is constant, so ```O(4)```.\n",
    "- the second loop does n iterations, where n is the size of the input. It is linear, so ```O(n)```.\n",
    "- the last loop does n*n iterations, where n is the size of the input. It is quadratic, so ```O(n^2)```.  \n",
    "\n",
    "Therefore, by summing ```O(5) + O(n) + O(n^2)``` we can say that the function is ```O(n^2)```, which \"dominates\" the other terms.\n",
    "\n",
    "</details>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example 4**\n",
    "\n",
    "Determine the complexity of the  ```listHalver``` function that returns every division by 2 of the ```inputList``` parameter until it's empty, and the ```sliceStepper``` function that uses ```listHalver``` function with lists of length  ```n...1```. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n",
      "[1, 2]\n",
      "[1]\n",
      "------------\n",
      "[1, 2, 3, 4, 5]\n",
      "[1, 2]\n",
      "[1]\n",
      "[1, 2, 3, 4]\n",
      "[1, 2]\n",
      "[1]\n",
      "[1, 2, 3, 4]\n",
      "[1, 2]\n",
      "[1]\n",
      "[1, 2, 3]\n",
      "[1]\n",
      "[1, 2, 3]\n",
      "[1]\n",
      "[1, 2]\n",
      "[1]\n",
      "[1, 2]\n",
      "[1]\n",
      "[1]\n",
      "[1]\n"
     ]
    }
   ],
   "source": [
    "def listHalver(inputList):\n",
    "    sliced = inputList\n",
    "    while len(sliced) >= 2:\n",
    "        sliced = sliced[:int(len(sliced)/2)]\n",
    "        print(sliced)\n",
    "\n",
    "listHalver([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
    "print(\"------------\")\n",
    "\n",
    "def halverStepper(maxListLength):\n",
    "    for step in reversed(range(1, maxListLength)):\n",
    "        listHalver(list(range(1, step)))\n",
    "\n",
    "halverStepper(12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity</summary>\n",
    "\n",
    "The ```listHalver``` function needs to look at a smaller subset of the data at every step, and is therefore logarithmic, ```O(log(n))```.  \n",
    "The ```halverStepper``` function does ```n``` times an ```O(log(n))``` operation (```listHalver```), and is therefore ```O(nlog(n))```.\n",
    "\n",
    "\n",
    "</details>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "1. Let ```M``` be a square matrix - a list containing ```n``` lists, each of them of size ```n```. Return the computational complexity of function ```fun()``` with respect to ```n```:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fun(M):\n",
    "    for row in M:\n",
    "        for element in row:\n",
    "            print(sum([x for x in row if x != element]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity</summary>\n",
    "\n",
    "```O(n^3)```, because the complexity is ```n``` for the list comprehension, times ```n``` for the inner ```for``` cycle, times ```n``` for the outer ```for``` cycle\n",
    "\n",
    "</details>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Given a list ```L``` of ```n``` elements, please compute the asymptotic computational complexity of the following function, explaining your reasoning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_fun(L):\n",
    "    n = len(L)\n",
    "    tmp = []\n",
    "    for i in range(int(n)):\n",
    "        tmp.insert(0,L[i]-L[int(n/3)])\n",
    "    return sum(tmp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity</summary>\n",
    "\n",
    "It mainly depends on the implementation of the list (we will see in the following practicals what this means). One possbile answer could be:\n",
    "\n",
    "- ```len(L)``` has a constant complexity ```O(1)```\n",
    "- the for loop costs ```n``` times the head insertion in the list ```tmp```, if this requires a shift right of all the previously inserted elements, this could be in total ```O(n^2)```\n",
    "- the final sum costs ```O(n)```\n",
    "\n",
    "This makes a quadratic overall asymptotic complexity.\n",
    "\n",
    "</details>\n",
    "\n",
    "3. Given a sorted list ```alist``` of ```n``` elements, please compute the asymptotic computational complexity of the following function implementing binary search, explaining your reasoning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def binarySearch(alist, item):\n",
    "    first = 0\n",
    "    last = len(alist)-1\n",
    "    found = False\n",
    "\n",
    "    while first <= last and not found:\n",
    "        midpoint = (first + last)//2\n",
    "        if alist[midpoint] == item:\n",
    "            found = True\n",
    "        else:\n",
    "            if item < alist[midpoint]:\n",
    "            last = midpoint-1\n",
    "            else:\n",
    "                first = midpoint+1\n",
    "\n",
    "    return found"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity</summary>\n",
    "\n",
    "The binary search divides by two the lenght of the list at each iteration, this maks the asymptotic complexity to be ```0(log(n))```.\n",
    "\n",
    "</details>\n",
    "\n",
    "4. Please compute the asymptotic computational complexity of the following code, that computes the Fibonacci sequence according to the following formula:\n",
    "\n",
    "- If ```n``` is even, then ```k = n/2``` and ```F(n) = [2*F(k-1) + F(k)]*F(k)```\n",
    "- If ```n``` is odd, then ```k = (n + 1)/2``` and ```F(n) = F(k)*F(k) + F(k-1)*F(k-1)```."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an array of length n for memoization (we will see later what memoization is...)\n",
    "n = 10\n",
    "f = [0] * n\n",
    " \n",
    "# Returns n'th fibonacci number using table f[]\n",
    "def fib(n) :\n",
    "    # Base cases\n",
    "    if (n == 0) :\n",
    "        return 0\n",
    "    if (n == 1 or n == 2) :\n",
    "        f[n] = 1\n",
    "        return (f[n])\n",
    " \n",
    "    # If fib(n) is already computed (thanks to memoization)\n",
    "    if (f[n]):\n",
    "        return f[n]\n",
    " \n",
    "    # Applying above formula [Note value n&1 is 1\n",
    "    # if n is odd, else 0.\n",
    "    if((n & 1)):\n",
    "        # (n & 1) is 1 when n is odd, 0 otherwise\n",
    "        k = (n + 1) // 2\n",
    "        f[n] = (fib(k) * fib(k) + fib(k-1) * fib(k-1))\n",
    "    else :\n",
    "        k = n // 2\n",
    "        f[n] = (2*fib(k-1) + fib(k))*fib(k)\n",
    " \n",
    "    return f[n]\n",
    " \n",
    " \n",
    "# main code\n",
    "for i in range(n):\n",
    "    print(fib(i), end=' ') # avoids to add a new line at each iteration\n",
    "print('') # to go to new line at the end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity</summary>\n",
    "\n",
    "Thanks to memoization, the access to the already computed Fibonacci numbers has constant complexity (```O(1)```). This makes the asymptotic complexity of the function ```fib``` to be logarithmic (```O(log (n))```). The function ```fib``` is then called ```n``` times. This makes the overall complexity to be ```O(n log(n))```.\n",
    "\n",
    "</details>\n",
    "\n",
    "5. Please compute the asymptotic computational complexity of the function ```subsets```, that computes all the subsets of a set of elements.\n",
    "\n",
    "```\n",
    "Subsets of {a,b}: {(), ('b',), ('a',), ('b', 'a')}\n",
    "Subsets of {a,b,c}: {(), ('b',), ('a',), ('c',), ('b', 'a'), ('b', 'c'), ('a', 'c'), ('b', 'a', 'c')}\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import chain, combinations\n",
    "\n",
    "def subsets(elementSet):\n",
    "    return set(chain.from_iterable(combinations(elementSet, r) for r in range(len(elementSet)+1)))\n",
    "\n",
    "print('Subsets of {a,b}:', subsets({'a','b'}))\n",
    "print('Subsets of {a,b,c}:', subsets({'a','b','c'}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Show/Hide Complexity</summary>\n",
    "\n",
    "Whatâ€™s important to notice here is that the number of subsets grows **exponentially** with the number ```n``` of the elements on the original set. This makes the overall complexity to be exponential ```O(2^n)```.\n",
    "\n",
    "</details>"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
